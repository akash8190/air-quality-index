{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","result","loading","city","formData","T","TM","Tm","H","PP","VV","V","VM","handleInput","bind","handleSubmit","handleSelect","getCityDataAndPopulateForm","cityName","this","setState","fetch","method","then","response","json","Number","main","temp","temp_max","temp_min","humidity","pp","rain","snow","visibility","toFixed","wind","speed","event","target","id","value","preventDefault","headers","body","JSON","stringify","className","onSubmit","type","onChange","step","disabled","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c06aea1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      loading: false,\n      city: 'Mumbai',\n      formData: {\n        T: 0,\n        TM: 0,\n        Tm: 0,\n        H: 0,\n        PP: 0,\n        VV: 0,\n        V: 0,\n        VM: 0\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.getCityDataAndPopulateForm(this.state.city);\n  }\n\n  getCityDataAndPopulateForm(cityName) {\n    this.setState({ loading: true });\n    fetch(`city?city=${cityName}`, {\n      method: 'GET',\n    })\n      .then(response => response.json())\n      .then(response => {\n        const formData = this.state.formData;\n        formData['T'] = Number(response.main.temp);\n        formData['TM'] = Number(response.main.temp_max);\n        formData['Tm'] = Number(response.main.temp_min);\n        formData['H'] = Number(response.main.humidity);\n        let pp = 0;\n        if (response) {\n          if (response.rain && response.rain['3h']) {\n            pp = response.rain['3h'];\n          }\n          else if (response.snow && response.snow['3h']) {\n            pp = response.snow['3h'];\n          }\n        }\n        formData['PP'] = Number(pp);\n        formData['VV'] = Number((Number(response.visibility) / 1000).toFixed(2));\n        formData['V'] = Number((Number(response.wind.speed) * 1000 / 3600).toFixed(2));\n        formData['VM'] = Number((Number(response.wind.speed) * 1000 / 3600).toFixed(2));\n        this.setState({ formData });\n        this.setState({ loading: false });\n        this.setState({ result: null });\n      });\n  }\n\n  handleInput(event) {\n    const formData = this.state.formData;\n    formData[event.target.id] = Number(event.target.value);\n    this.setState({ formData });\n  }\n\n  handleSelect(event) {\n    const cityName = event.target.value;\n    this.setState({ city: cityName }, () => {\n      this.getCityDataAndPopulateForm(cityName);\n    });\n  }\n\n  handleSubmit(event) {\n    this.setState({ loading: true });\n    this.setState({ result: null });\n    event.preventDefault();\n    fetch('predict', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(this.state.formData)\n    })\n      .then(response => response.json())\n      .then(response => this.setState({\n        result: response,\n        loading: false\n      }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Default form filled for { this.state.city } data. Edit as required and submit.\n          </p>\n          <form onSubmit={this.handleSubmit}>\n\n            <label>Enter Average Temperature (&deg;C)</label>\n            <input type='number' value={this.state.formData.T} id='T' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Max Temperature (&deg;C)</label>\n            <input type='number' value={this.state.formData.TM} id='TM' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Min Temperature (&deg;C)</label>\n            <input type='number' value={this.state.formData.Tm} id='Tm' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Average Relative Humidity (%)</label>\n            <input type='number' value={this.state.formData.H} id='H' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Total Rainfall/Snowmelt (mm)</label>\n            <input type='number' value={this.state.formData.PP} id='PP' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Average Visibility (km)</label>\n            <input type='number' value={this.state.formData.VV} id='VV' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Average Wind Speed (km/h)</label>\n            <input type='number' value={this.state.formData.V} id='V' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <label>Enter Maximum Sustained Wind Speed (km/h)</label>\n            <input type='number' value={this.state.formData.VM} id='VM' onChange={this.handleInput} step=\"0.01\" />\n            <br /><br />\n\n            <h3>OR</h3>\n            <label>Fill with current data for popular cities</label>\n            <select value={this.state.city} onChange={this.handleSelect} >\n              <option value=\"Mumbai\">Mumbai</option>\n              <option value=\"Delhi\">Delhi</option>\n              <option value=\"Bangalore\">Bangalore</option>\n            </select>\n            <br /><br />\n\n            <input type='submit' disabled={this.state.loading} />\n\n          </form>\n          {\n            this.state.result && !this.state.loading &&\n            <div>AQI Prediction is: {this.state.result}</div>\n          }\n          {\n            this.state.loading &&\n            <div>Loading... Please wait...</div>\n          }\n        </header>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}